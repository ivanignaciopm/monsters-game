import random
import datetime
import time
fd2 = [True, False]
its_day = random.choice(fd2)
total_territory = 100
monsters = []
monsters_name = []
humans = []
humans_name = []
teams = {}
class Monster:
  # if a monster it's dead his power will duplicate and also his hp. if it's Nightime they will become zombies.
  def __init__(self, name,attack = 20, hp = 100, type = 'monster',dead = False, zombie = False):
    self.name = name 
    self.type = type 
    self.hp = hp
    self.isalive = dead
    self.zombie = zombie
    self.attack = attack
    monsters.append(self)
    monsters_name.append(self.name)
  def __repr__(self):
    return self.name
  def zombieform(self):
    if its_day == False:
      self.zombie = True
  def power(self):
    if self.zombie == True:
      self.hp = self.hp
      self.attack = self.attack *3
  def ghost (self):
    if self.hp == 0:
      self.type = 'Ghost'
      self.attack = self.attack/2
class HumanFriend:
  # every monster has a human friend. they are a team and they are trying to conquer the world.
  def __init__(self, name, bloodtype, zombie = False):
    self.name = name
    self.blood = bloodtype
    self.zombie = zombie
    self.hp = 100
    self.attack = 15
    self.territory = 0
    humans.append(self)
    humans_name.append(self.name)
  #def __repr__(self):
    #return 'This human is called {}, with an {} hp, {} bloodtype, {} attack and {} m2 of territory.'.format(self.name, self.hp, self.blood, self.attack, self.territory)
  def zombieform(self):
    if its_day == False and self.blood != '0':
      self.zombie = True
  def power(self):
    if self.zombie == True:
      self.attack = self.attack*2
      self.hp = self.hp*2
  def territory(self, totalpower):
    True
print('The day has started...')
monster_1 = Monster('Baaszjeh',20, 125)
monster_2 = Monster('Cachulo',35, 115)
monster_3 = Monster('ElLokoCR4zy',100, 85, 'Ghost')
monster_4 = Monster('Demian',90, 100)
monster_5 = Monster('TerrorMaker',45, 135)
human1 = HumanFriend('Cony', 'A505')
human2 = HumanFriend('Jhony', 'B404')
human3 = HumanFriend('Louie', '0')
human4 = HumanFriend('Carlo', 'A505')
human5 = HumanFriend('Alicia', '0')
def randomteams():
  while len(teams) < len(humans):
    r1 = random.choice(monsters)
    r2 = random.choice(humans)
    if r2 not in teams:
       teams[r2] = r1
  return teams
def team_power(human):
  total_power = human.attack + teams[human].attack
  return total_power
def team_hp(human):
  total_hp = human.hp + teams[human].hp
  return total_hp

#def winner()
#def display()
def a_fight_created():
  ratio = [True, False, False]
  r_choice = random.choice(ratio)
  if r_choice == True:
    team1 = random.choice(humans)
    team2 = random.choice(humans)
    while team2 == team1:
      team2 = random.choice(humans)
    team1_p = team_power(team1)
    team1_hp = team_hp(team1)
    team2_p = team_power(team2)
    team2_hp = team_hp(team2)
    if team1_hp - team2_p > team2_hp - team1_p:
      winner = team1.name
    elif team1_hp - team2_p == team2_hp - team1_p or (team1_hp - team2_p <= 0 and team2_hp - team1_p <= 0):
      return 'it\'s a draw!'
    else:
      winner = team2.name
    return '''A fight has been created!
    Team 1 [{}, {}]                 Team 2 [{}, {}].
    attack: {}          vs.              attack: {}
      hp:  {}                             hp:    {}

    final hp: {}                         final hp: {}

    {} is the winner!, + 10 territory'''.format(team1.name, teams[team1], team2.name, teams[team2], team1_p, team2_p, team1_hp, team2_hp, team1_hp - team2_p, team2_hp - team1_p, winner)
  else:
    return 'no fights for now'

monster_1.zombieform()
monster_2.zombieform()
monster_3.zombieform()
monster_4.zombieform()
monster_5.zombieform()
monster_1.power()
monster_2.power()
monster_3.power()
monster_4.power()
monster_5.power()
human1.zombieform()
human2.zombieform()
human3.zombieform()
human4.zombieform()
human5.zombieform()
human1.power()
human2.power()
human3.power()
human4.power()
human5.power()
ran = randomteams()
def get_totals():
 for key in teams:
   print('the {}, {} team has {} total power and {} total hp'.format(key.name, teams[key].name, team_power(key), team_hp(key)))
print(a_fight_created())
#print(get_totals())


  
